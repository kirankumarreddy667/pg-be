name: PowerGotha CI/CD

on:
  push:
    branches:
      - main
      - development
      - staging
  pull_request:
    branches:
      - main
      - development
      - staging
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '10.2.5'
  CACHE_KEY: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
  DB_HOST: 143.244.132.143
  DB_PORT: 3306

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
      DB_DATABASE: ${{ github.ref == 'refs/heads/main' && 'powergotha_prod' || github.ref == 'refs/heads/staging' && 'powergotha_staging' || 'powergotha' }}
      DB_USERNAME: ${{ github.ref == 'refs/heads/main' && 'prod_user' || github.ref == 'refs/heads/staging' && 'staging_user' || 'powergotha_admin' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.DB_PASSWORD }}" ] || [ -z "${{ secrets.JWT_ACCESS_SECRET }}" ] || [ -z "${{ secrets.JWT_REFRESH_SECRET }}" ] || [ -z "${{ secrets.SESSION_SECRET }}" ] || [ -z "${{ secrets.CSRF_SECRET }}" ]; then
            echo "Error: Required secrets are not set"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Run tests
        run: pnpm test
        env:
          NODE_ENV: ${{ env.NODE_ENV }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_DATABASE: ${{ env.DB_DATABASE }}
          DB_USERNAME: ${{ env.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          CSRF_SECRET: ${{ secrets.CSRF_SECRET }}

      - name: Build
        run: pnpm build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  deploy-development:
    name: Deploy to Development
    needs: build-and-test
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Deploy to Development
        run: |
          echo "Deploying to development environment"
          # Add your deployment commands here
          # Example: scp, rsync, or cloud provider CLI commands

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-test
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment"
          # Add your deployment commands here

  deploy-production:
    name: Deploy to Production
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment"
          # Add your deployment commands here 